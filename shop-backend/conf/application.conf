play.evolutions {
}

play.db {
  prototype {
  }
}
db {
}

session = {
  cookieName = "SHOP_USER"
  secure = false

  # The max age to set on the cookie.
  # If null, the cookie expires when the user closes their browser.
  # An important thing to note, this only sets when the browser will discard the cookie.
  maxAge = null

  httpOnly = true

  # The value of the SameSite attribute of the cookie. Set to null for no SameSite attribute.
  sameSite = "lax"

  # The domain to set on the session cookie
  # If null, does not set a domain on the session cookie.
  domain = null

  # The session path
  # Must start with /.
  path = ${play.http.context}

  jwt {
    signatureAlgorithm = "HS256"

    expiresAfter = ${play.http.session.maxAge}

    clockSkew = 5 minutes

    dataClaim = "data"
  }
}

//slick.dbs.default.driver="slick.driver.H2Driver$"
//slick.dbs.default.db.profile="org.h2.Driver"
//slick.dbs.default.db.url="jdbc:h2:mem:play;DB_CLOSE_DELAY=-1"

slick.dbs.default.driver="slick.driver.SQLiteDriver$"
slick.dbs.default.db.driver="org.sqlite.JDBC"
slick.dbs.default.db.url="jdbc:sqlite:ebiznes.sqlite"

play.filters.disabled+=play.filters.csrf.CSRFFilter
play.filters.cors {
  # allow all paths
//  pathPrefixes = ["/"]
  # allow all origins (You can specify if you want)
  allowedOrigins = ["http://localhost:3000"]
  allowedHttpMethods = ["GET", "POST"]
  # allow all headers
  allowedHttpHeaders = null
}
play.filters.hosts {
  # Allow requests to example.com, its subdomains, and localhost:9000.
  allowed = ["localhost:3000", "localhost:9090"]
}

play.http.filters = "security.CorsInterceptor"

app.key = ""
app.token.validity.time = 60
//---> google
google.client.id = ""
google.client.secret = ""
google.redirect.url = ""
google.access.scope = ""
//"https://www.googleapis.com/auth/userinfo.profile",
//---> github
github.client.id = ""
github.client.secret = ""
github.redirect.url = ""
github.access.scope = ""
github.access.state = ""